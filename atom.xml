<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>丁满博客 - Hexo博客</title>
  
  
  <link href="https://developing-man.github.io/atom.xml" rel="self"/>
  
  <link href="https://developing-man.github.io/"/>
  <updated>2021-03-08T14:30:48.953Z</updated>
  <id>https://developing-man.github.io/</id>
  
  <author>
    <name>胖胖的丁满</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务商城项目（一）</title>
    <link href="https://developing-man.github.io/posts/29199.html"/>
    <id>https://developing-man.github.io/posts/29199.html</id>
    <published>2021-03-07T09:59:35.000Z</published>
    <updated>2021-03-08T14:30:48.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a><strong>前情提要</strong></h2><p>&emsp;&emsp;最近在公司参与微服务配置中心参数管理项目，想着关于微服务理论知识了解不少，但是还并没有机会完全实践去打通整个流程，因此就参照尚硅谷的<a href="https://www.bilibili.com/video/BV1rK4y1C7fv">谷粒商城项目</a>从头到尾进行一次微服务项目的实际搭建过程。</p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a><strong>项目背景</strong></h2><p>谷粒商城项目是B2C（Business to Consumer）模式，即常见的供应商直接将商品卖给用户，也就是通常说的商业零售，如京东商城。</p><h2 id="项目技术-amp-特色"><a href="#项目技术-amp-特色" class="headerlink" title="项目技术&amp;特色"></a><strong>项目技术&amp;特色</strong></h2><ol><li> 前后分离开发，并开发基于 vue 的后台管理系统 </li><li> SpringCloud 全新的解决方案 </li><li> 应用监控、限流、网关、熔断降级等分布式方案全方位涉及 </li><li> 分布式事务、分布式锁等分布式系统的难点 </li><li> 分析高并发场景的编码方式，线程池，异步编排等使用 </li><li> 压力测试与性能优化 </li><li>各种集群技术的区别以及使用 </li><li> CI/CD 使用</li></ol><h2 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a><strong>项目架构图</strong></h2><ul><li><h3 id="项目微服务架构图"><a href="#项目微服务架构图" class="headerlink" title="项目微服务架构图"></a>项目微服务架构图</h3><p><img src="https://cdn.jsdelivr.net/gh/developing-man/ImgHosting/TIMON-PIC/image-20210307182343830.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/developing-man/ImgHosting/TIMON-PIC/image-20210307182343830.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="谷粒商城-微服务架构图"></p></li><li><h3 id="微服务划分图"><a href="#微服务划分图" class="headerlink" title="微服务划分图"></a>微服务划分图</h3></li></ul><p><img src="https://cdn.jsdelivr.net/gh/developing-man/ImgHosting/TIMON-PIC/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86%E5%9B%BE.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/developing-man/ImgHosting/TIMON-PIC/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86%E5%9B%BE.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="谷粒商城-微服务划分图"></p><h2 id="分布式基础概念"><a href="#分布式基础概念" class="headerlink" title="分布式基础概念"></a><strong>分布式基础概念</strong></h2><ul><li><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3></li></ul><p>&emsp;&emsp;微服务架构风格，就像是把一个单独的应用程序开发为一套小服务，每个小服务运行在自 己的进程中，并使用轻量级机制通信，通常是 HTTP API。这些服务围绕业务能力来构建， 并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据 存储技术，并保持最低限度的集中式管理。</p><blockquote><p>简而言之：拒绝大型单体应用，基于业务边界进行服务微化拆分，各个服务独立部署运行。</p></blockquote><ul><li><h3 id="集群-amp-分布式-amp-节点"><a href="#集群-amp-分布式-amp-节点" class="headerlink" title="集群&amp;分布式&amp;节点"></a>集群&amp;分布式&amp;节点</h3></li></ul><p>集群是个物理形态，分布式是个工作方式。 </p><p>只要是一堆机器，就可以叫集群，他们是不是一起协作着干活，这个谁也不知道； </p><blockquote><p>《分布式系统原理与范型》定义： “分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统” ，分布式系统（distributed system）是建立在网络之上的软件系统。 </p></blockquote><p>分布式是指<code>将不同的业务分布在不同的地方</code>。</p><p>集群指的是<code>将几台服务器集中在一起，实现同一业务</code>。 </p><p>例如：京东是一个分布式系统，众多业务运行在不同的机器，<code>所有业务</code>构成一个大型的<code>业务集群</code>。每一个小的业务，比如用户系统，访问压力大的时候一台服务器是不够的。我们就应该将用户系统部署到<code>多个服务器</code>，也就是每一个业务系统也可以做<code>集群化</code>； 分布式中的每一个节点，都可以做集群。 而<code>集群并不一定就是分布式的</code>。 </p><p>节点：集群中的一个服务器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;&lt;strong&gt;前情提要&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近在公司参与微服务配置中心参数管理项目，想着关于微服务理论知识了</summary>
      
    
    
    
    <category term="Java" scheme="https://developing-man.github.io/categories/Java/"/>
    
    <category term="微服务" scheme="https://developing-man.github.io/categories/Java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>如何快速搭建该博客</title>
    <link href="https://developing-man.github.io/posts/7720.html"/>
    <id>https://developing-man.github.io/posts/7720.html</id>
    <published>2021-02-21T15:46:13.000Z</published>
    <updated>2021-02-23T14:57:38.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>2021年02月21日晚更新。</p><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a><strong>基本环境</strong></h2><ul><li><p>Window10</p></li><li><p><a href="https://nodejs.org/en/">Node.js</a> （点击进入官网下载）</p><p>在 Windows 环境下安装 Node.js 非常简单，仅须到官网下载安装文件并执行即可完成安装。</p><p>选择Add to PATH然后点Next继续就行了。</p><p>然后在终端我们分别执行下面的命令验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>安装cnpm</p><p>在git bash里面执行下面的命令，并检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure></li><li><p><a href="https://git-scm.com/downloads">Git</a>（点击进入官网下载）</p><p>这个大家基本都有的。</p></li></ul><h2 id="安装Hexo-版本4-2-1"><a href="#安装Hexo-版本4-2-1" class="headerlink" title="安装Hexo (版本4.2.1)"></a><strong>安装Hexo (版本4.2.1)</strong></h2><ul><li><p>在任意盘新建hexo文件夹并右键，选择Bit Bash Here</p></li><li><p>输入安装hexo命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>接下来我们对hexo 进行初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>到<code>Install dependencies</code>的时候你可能会卡住，这是大多数人基本都会遇到的</p><p>我们只需要在这里的时候结束命令，按<code>Ctrl + c</code>就可以结束命令</p><p>然后执行下面这个命令，就可以使用国内的镜像为你完成博客的初始化工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>然后执行下面这个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g 或者hexo generate</span><br><span class="line">hexo s 或者hexo server</span><br></pre></td></tr></table></figure></li><li><p>这样就可以到<a href="http://localhost:4000/">http://localhost:4000/</a> 查看了</p><p><img src="https://cdn.jsdelivr.net/gh/developing-man/ImgHosting/TIMON-PIC/photo03.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/developing-man/ImgHosting/TIMON-PIC/photo03.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="photo03"></p></li></ul><h2 id="如何下载使用主题"><a href="#如何下载使用主题" class="headerlink" title="如何下载使用主题"></a><strong>如何下载使用主题</strong></h2><ul><li><p>打开主题的项目地址后，点击<code>Clone or download</code>，然后复制https开头的地址</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 复制的地址 themes&#x2F;主题名字</span><br></pre></td></tr></table></figure><p>我本次使用的为：<a href="https://github.com/volantis-x/hexo-theme-volantis/">volantis</a></p></li><li><p>使用主题</p><p>在博客的目录下有一个叫<code>_config.yml</code>的文件</p><p>找到<code>themes</code>这一行，然后将主题名字修改为你的主题名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: volantis</span><br></pre></td></tr></table></figure><p>再次执行，就能看到你设置的新主题了</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/developing-man/ImgHosting/TIMON-PIC/image-20210221231238837.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/developing-man/ImgHosting/TIMON-PIC/image-20210221231238837.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image-20210221231238837"></p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a><strong>配置主题</strong></h2><p>我们需要认识两个文件</p><ul><li><p>站点配置文件</p><p>指的是博客根目录下的<code>_config.yml</code></p></li><li><p>主题配置文件</p><p>指的是某个主题下的<code>_config.yml</code></p><p>它们的名字都叫<code>_config.yml</code>但是你不能弄混淆</p></li></ul><p>在我们看主题文档配置的时候，是必须要分清这两个概念的，不然会报错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;2021年02月21日晚更新。&lt;/p&gt;
&lt;h2 id=&quot;基本环境&quot;&gt;&lt;a href=&quot;#基本环境&quot; cla</summary>
      
    
    
    
    <category term="Blog" scheme="https://developing-man.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://developing-man.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://developing-man.github.io/posts/59448.html"/>
    <id>https://developing-man.github.io/posts/59448.html</id>
    <published>2021-02-15T16:13:02.189Z</published>
    <updated>2021-03-06T12:33:50.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>&emsp;&emsp;前年的6月，我从传统制造企业裸辞，学习Java开发，后进入了武汉的一家外包公司，负责网络通讯运维管理的Java后端开发。</p><p>&emsp;&emsp;转行的这一年半内，我不仅在实践中夯实了编程技术，同时也为了下一次跳槽额外地做了些准备和补充学习，工作到去年的12月份(2020.12)，我跳槽来到上海（女朋友也在上海）的一家银行外包公司。目前想记录下这些经历，为了之后自我回顾，也激励自己不断地学习下去，能早日进入大厂。</p><p><strong>背景介绍</strong>：某末流211工科本科，17年毕业在某家客车企业做了两年的工艺工程师，后转行Java，在一家外包做了1年时间，现入职上海一家银行外包。</p><p><strong>我的目标：</strong>没有特定的公司，但是一定是大厂。进入大厂这个目标在我转行的时候就确定了，当时我的想法是，不管怎么样，先进入一家公司工作一两年的时间，然后跳槽大厂。大厂我在心里就是一线的腾讯，百度，阿里，字节，华为，二线的新浪，滴滴等等…，我想表达的是，如果你有这个进入大厂的目标，那么就要下定决心，这样好帮助你提早做好准备规划。</p><p><strong>大厂要掌握的技能：</strong>这个从招聘要求中看不出来，因为大厂的招聘要求都是比较虚的，比如什么要有热情之类的，这些对我们没有帮助，有帮助的信息其实在牛客网，牛客网面经分为社招和校招，我们主要看社招，校招的可以参考看看。经过广泛阅读和筛选，我把要做的准备分为这四个部分：</p><ul><li>算法题：大厂面试必考算法题，需要花大量时间去学习数据结构和刷算法题。</li><li>后端技术：大致是Spring Boot、Spring Cloud、Dubbo、ZooKeeper、Redis、MySQL、Kafka、RocketMQ、Docker以及分布式各种知识。</li><li>基础知识：计算机网络、计算机安全、操作系统(Linux)。</li><li>深挖项目：项目的亮点。</li></ul><h2 id="技能准备"><a href="#技能准备" class="headerlink" title="技能准备"></a><strong>技能准备</strong></h2><ul><li><h4 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a><strong>算法题</strong></h4><p>算法题其实应该完整称为：数据结构与算法。</p><p><strong>第一步</strong>就是要先学习数据结构，比如队列，栈，二叉树。队列和栈就需要掌握添加，删减，插入元素的代码，而二叉树要掌握前序，中序，后序遍历（递归版本和不递归版本都要会，对算法学习有帮助），另外，只需要了解二叉搜索树、平衡二叉搜索树、红黑树、N叉树的区别优缺点，至于他们怎么保证平衡太复杂了，没兴趣可以不学。</p><p><strong>第二步</strong>学习算法，这里的算法指的是排序算法，请掌握冒泡、堆排、归并、桶排、快排，尤其是归并，归并的思想在后面刷算法题中经常用到，桶排也是如此，空间换时间的思想在算法中很常见。这些排序算法请能够理解并且默写，知道他们的时间和空间复杂度，这些是基础，必须掌握。</p><p><strong>第三步</strong>真正的算法题，这里的算法题指的是牛客网剑指offer和Leetcode中的题目，这些题目不是单纯的让你排序那么简单，他可能是让你用队列实现一个栈，可能是让你求出二叉树的深度，可能让你算出跳台阶的方法….，里面用到的思想就有，归并，递归，KMP，动态规划等等(我用到的也就这么多…，还有什么广度优先，深度优先…)。</p><p>&emsp;&emsp;剑指offer可以认为是算法题入门，并不是说它很简单，而是他的解法很常见。Leetcode建议不要全部做，可以先去搜索各个大厂面经，把它们的算法题记下来，然后去Leetcode一个一个去刷，这样针对性是最强的。最后，什么时候学习算法呢？应该放在准备期间的后半段时间，因为算法题还是需要一些手感的，在求职的时候保持算法手感有一定作用。</p></li><li><h4 id="后端技术"><a href="#后端技术" class="headerlink" title="后端技术"></a><strong>后端技术</strong></h4><p>&emsp;&emsp;Java主要的就是这些技术：大致是spring Boot、Spring Cloud、Dubbo、ZooKeeper、Redis、MySQL、Kafka、RocketMQ、Docker、分布式、JVM、并发编程。</p><p>&emsp;&emsp;Spring Cloud我是学习<a href="https://www.bilibili.com/video/BV1n4411S7Rv">社交项目</a>这个视频的，这个视频几乎包含了目前互联网企业常用的技术，其中必须要会的是redis、eureka、feign、docker、hystrix、zuul。掌握这些使用，应该要学习2个月时间。另外的比如mongDB、es、jenkins可以根据需要进行学习。其次vue可以学习一下，这种前端框架学习之后对理解目前的前端技术是有用的。Dubbo、ZooKeeper这两个和Spring Cloud是不同的微服务框架，需要单独学习。我是学习的<a href="https://www.bilibili.com/video/BV1Gb411T7Ha">尚硅谷</a>这个视频，在学习Dubbo的时候其实就会涉及到ZooKeeper的使用，但是上面的视频中讲ZooKeeper比较浅显，深入学习ZooKeeper推荐看<a href="https://www.bilibili.com/video/BV1PW411r7iP">尚硅谷</a>这个视频。这里再次感谢尚硅谷的优质的教程，帮助很大。</p><p>&emsp;&emsp;redis的话，大家在B站找个播放量高的效果大差不差。主要掌握redis 的基本数据结构、持久化、哨兵、集群、主从复制这几个关键点，另外推荐掌握zset的数据结构底层实现，编码方式，会是一个亮点。</p><p>&emsp;&emsp;MySQL需要额外了解日志系统、锁原理、索引原理、隔离、主从延时等等，帮助非常大。算是对于Mysql的进阶学习。</p><p>&emsp;&emsp;<a href="https://www.bilibili.com/video/BV1bt411y72u">Kafka</a>需要了解Kafka的Rebalance机制，主从同步机制，选主机制等等。</p><p>&emsp;&emsp;<a href="https://www.bilibili.com/video/av27122140">docker</a>推荐尚硅谷的，对于docker不用特别精通，知道有docker这样的容器，他的作用是什么，优点是什么就行。</p><p>&emsp;&emsp;另外我是搞JAVA的，需要单独掌握JVM的知识，包括垃圾回收器的种类、垃圾回收算法、锁的底层实现原理、JMM内存模型…..另外还要学习并发编程，包括AQS，原生锁，乐观锁、线程池、LOCK、并发工具类….这些也可以从网上 找到相应的知识去学习。</p><p>&emsp;&emsp;分布式理论，这部分东西比较杂乱，包括基本的CAP、BASE理论，限流、降级、熔断、主从一致算法(raft，hash一致..)、分布式锁、分布式事务、缓存和数据库一致性问题、选主算法等等，没有固定一个教学视频，都是东找找，西找找拼凑起来的。</p><p>&emsp;&emsp;最后要说的是，这部分内容学什么要因人而异，我工作的项目微服务涉及较少，所以花了很多时间来掌握这些微服务的知识，如果你目前的公司业务中用到有这里的技术，那其实就可以省略掌握相应的部分。这部分的学习需要花费3-4个月的时间。</p></li><li><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h4><p>&emsp;&emsp;基础知识包括了计算机网络，比如TCP三次握手和四次挥手，五层结构，http报文结构，https请求过程等等；也包括了计算机安全，比如各种网络攻击XSS、跨域攻击、sql注入等等；也包括操作系统，比如内核态用户态的区别、进程怎么通讯、线程和进程的区别、IO的类型、多路复用等等。最后还包括Linux的常见命令。这些因为我不是计算机专业所以比较薄弱，花了一两个月时间进行学习，主要就是看面经然后找博客，进而拓展学习。</p><p>&emsp;&emsp;最后以上三点的内容学习完后，强推用<a href="https://github.com/pure-xiaojie/JavaInterview">这位同学</a>的总结来检查自己学习的结果，你也可以根据这个总结来反推学习内容。当你能百分百回答上这些问题的时候，就差不多可以去面试了。</p></li><li><h4 id="项目深挖"><a href="#项目深挖" class="headerlink" title="项目深挖"></a><strong>项目深挖</strong></h4><p>&emsp;&emsp;这个因人而异了，回顾一年的工作，找出最亮眼的工作，亮眼的意思是，你独立完成，或者从无到有，或者提高性能多少，或者排查解决了什么重大生产事故等等。因为面试必会问“你做的最有挑战的一个技术难点是什么？你需要准备好。我的跳槽求职简历也是基于工作亮点来书写的。</p></li></ul><p>&emsp;&emsp;最后，我始终觉得，不管有多大的目标，只要是做好时间规划，内容规划，然后咬牙坚持一步步走下去，最后一定会收获想要的东西。愿大家都能收获自己的果实。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;前年的6月，我从传统制造企业裸辞，学习Java开发，后进入了武汉的一家外包公司，负</summary>
      
    
    
    
    <category term="杂记" scheme="https://developing-man.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://developing-man.github.io/posts/16107.html"/>
    <id>https://developing-man.github.io/posts/16107.html</id>
    <published>2021-02-14T15:24:05.674Z</published>
    <updated>2021-02-27T12:28:12.738Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;来上海两个多月了，新的工作也开始了一个多月。</p><p>&emsp;&emsp;之前在搜一些技术问题的时候，发现很多大佬都有自己的博客。加上偶尔发现我的发小“<a href="https://www.laoqiange.club/">老千哥</a>”自己也搭建了博客，用于记录平常的工作问题以及个人的想法，所以我一直也想建立一个属于自己的博客。但是前段时间在上家公司加班有点严重，加上为了找工作复习、投简历，所以没时间搞这件事儿。现在项目不算忙，所以就抽出时间搞了一个属于自己的博客，用来记录下自己的工作上和平时学习上的问题。</p><p>&emsp;&emsp;本次博客才用的是<a href="https://hexo.io/zh-cn/docs/">Hexo</a>进行搭建的，主题用的是volantis魔改版<a href="https://www.heson10.com/volantis/posts/3882.html">Volantis-heson</a>。按照作者的指导搭建好之后，将其部署在了GitHub Pages上。</p><p>&emsp;&emsp;曾经问过一个大佬在学习上又没有什么习惯或者技巧，他说“<strong>我每当解决一个问题之后都会总结并记录下来</strong>”。是的自己也深有体会，<strong>每次百度半天解决的问题，不做记录的话过一段时间，再遇到一样会去百度半天</strong>，可能这就是平常人与大佬们的区别吧。希望自己也能坚持学习，并将解决问题的方法或新学习到的知识记录下来，将来也能成为一个“大佬”，哈哈！</p><p>&emsp;&emsp;以某某大佬的一句话作为结尾，以此共勉：</p><p>&emsp;&emsp;“<strong>对任何渴望进步的人来说，写博客/文章/回答对自己的成长帮助都是巨大的。频率和数量不必过分强求，有话要说就写写，没事就歇歇，随意点。因为坚持写作的那一刻起，你就已经开始受益。</strong>”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;来上海两个多月了，新的工作也开始了一个多月。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;之前在搜一些技术问题的时候，发现很多大佬都有自己的博客。加上偶尔发现我的发小“&lt;a href=&quot;https://www.laoqiange.club/&quot;&gt;老千哥&lt;/a</summary>
      
    
    
    
    <category term="杂记" scheme="https://developing-man.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
